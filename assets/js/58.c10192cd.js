(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{614:function(e,n,t){"use strict";t.r(n);var a=t(42),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"nested-models"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nested-models"}},[e._v("#")]),e._v(" Nested models")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("AwesomeForm")]),e._v(" component allows you to include some other data coming from other models, via a nesting feature. It's called the "),t("code",[e._v("nestedModels")]),e._v(" features")]),e._v(" "),t("h2",{attrs:{id:"presentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#presentation"}},[e._v("#")]),e._v(" Presentation")]),e._v(" "),t("p",[e._v("Often you'll find yourself needing to display some additional data in the context of your current item. Exemple, list "),t("code",[e._v("comments")]),e._v(" while browsing a "),t("code",[e._v("blog post")]),e._v(", or listing some "),t("code",[e._v("invoices")]),e._v(" while browsing a "),t("code",[e._v("client")]),e._v(".")]),e._v(" "),t("p",[e._v("For that we created the nested models features. While browsing a item, you can display nested Tabs or list that will render in the context of the user.")]),e._v(" "),t("h2",{attrs:{id:"initialisation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initialisation"}},[e._v("#")]),e._v(" Initialisation")]),e._v(" "),t("p",[e._v("To create nested component, simply add the "),t("code",[e._v("nestedModels")]),e._v(" property (an array) and fill it with models definitions.")]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Property")]),e._v(" "),t("th",[e._v("type")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Possible Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("initiallyCollapsed")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("Allow you to set the nested element to be collapsed by default")]),e._v(" "),t("td",[t("code",[e._v("true")]),e._v(", "),t("code",[e._v("false")])]),e._v(" "),t("td",[t("code",[e._v("false")])])]),e._v(" "),t("tr",[t("td",[e._v("component")]),e._v(" "),t("td",[e._v("string/object")]),e._v(" "),t("td",[e._v("Allow you to the type of component to use to render the component. See the Model definition to see all the available fields.")]),e._v(" "),t("td"),e._v(" "),t("td",[e._v("undefined")])])])]),e._v(" "),t("h2",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),t("p",[e._v("Show a tab with a list of comments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n\n  ...\n   nestedModels: [\n      {\n        extends: 'comment',\n        config: {\n          name: 'Actions & comments',\n          namePlural: 'Actions & comments',\n          apiUrl: '{{ parent && parent.id ? \"/api/candidate/\" + parent.id + \"/comment?filters[includeModelData]=true\" : \"\" }}',\n          detailPageMode: 'modal',\n          title: 'Actions and comments',\n          actions: {\n            dateFilter: false,\n            pagination: true,\n          },\n          schema: {\n            properties: {\n              createdBy: {\n                type: 'string',\n                column: {\n                  type: 'relation',\n                  label: 'Created by',\n                  hidden: false,\n                  displayActions: false,\n                },\n                field: {\n                  readonly: true\n                }\n              },\n              AllModelRelations: {\n                type: 'object',\n                column: {\n                  type: 'object',\n                  label: 'Context',\n                  format: '{{ currentItem && currentItem.modelData? currentItem.model + \": \" + (currentItem.modelData.name || currentItem.modelData.title || currentItem.modelData.username || currentItem.modelId ): currentItem }}',\n                },\n                field: {\n                  readonly: true,\n                  displayOptions: {\n                    format: '{{ currentItem && currentItem.modelData? currentItem.model + \": \" + (currentItem.modelData.name || currentItem.modelData.title || currentItem.modelData.username || currentItem.modelId ): currentItem }}',\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n    ],\n...\n}\n\n")])])]),t("p",[e._v("Show a tab with a full page component")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    nestedModels: [\n      {\n        identity: 'cv',\n        name: 'Curriculum',\n        title: 'Curriculum',\n        tabIsVisible: '{{ parent && parent.cv ? true : false }}',\n        apiUrl: '/api/candidate',\n        itemId: '{{ parent ? parent.id : \"\" }}',\n        detailPageMode: 'page',\n        displayMode: 'page',\n        nestedDisplayMode: 'page',\n        component: 'AwesomeForm',\n        displayHeader: false,\n        mode: 'view',\n        actions: {\n          edit: false,\n          view: false,\n          delete: false,\n          changeDisplayMode: false\n        },\n        options: {\n        },\n        schema: {\n          properties: {\n            cv: {\n              field: {\n                label: '',\n                cols: 12,\n                classes: 'vh-100',\n                visible: true,\n                displayOptions: {\n                  type: 'url',\n                  embed: true,\n                  classes: 'h-100',\n                  styleClasses: 'h-100',\n                  styles: 'height:100%',\n                },\n              }\n            }\n          }\n        }\n      },\n      {\n        extends: 'recruitmentProcess',\n        config: {\n          apiUrl: '{{ parent && parent.id ? \"/api/recruitment-process?filters[candidateId]=\" + parent.id + \"\" : \"\" }}',\n          detailPageMode: 'modal',\n          name: 'Recruitment',\n          namePlural: 'Recruitments',\n          title: 'Recruitments',\n          actions: {\n            edit: false,\n            delete: false,\n            changeDisplayMode: false\n          },\n          options: {\n            viewPath: '/app/recruitment-process/:id',\n          },\n          schema: {\n            properties: {\n              candidateId: {\n                field: {\n                  readonly: true,\n                  default: '{{ parent && parent.id ? parent.id : undefined }}',\n                  // value: '{{ parent && parent.id ? parent.id : null }}',\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        extends: 'interview',\n        config: {\n          title: 'Interviews',\n          name: 'Interviews',\n          namePlural: 'Interviews',\n          apiUrl: '{{ parent && parent.id ? \"/api/interview?filters[candidateId]=\" + parent.id + \"\" : \"\" }}',\n          detailPageMode: 'modal',\n          actions: {\n            search: false,\n            pagination: false,\n            noActions: true,\n            create: true,\n          },\n          schema: {\n            properties: {\n              candidateId: {\n                field: {\n                  readonly: true,\n                  default: '{{ parent && parent.id ? parent.id : undefined }}',\n                  // value: '{{ parent && parent.id ? parent.id : null }}',\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        extends: 'comment',\n        config: {\n          name: 'Actions & comments',\n          namePlural: 'Actions & comments',\n          apiUrl: '{{ parent && parent.id ? \"/api/candidate/\" + parent.id + \"/comment?filters[includeModelData]=true\" : \"\" }}',\n          detailPageMode: 'modal',\n          title: 'Actions and comments',\n          actions: {\n            dateFilter: false,\n            pagination: true,\n          },\n          schema: {\n            properties: {\n              createdBy: {\n                type: 'string',\n                column: {\n                  type: 'relation',\n                  label: 'Created by',\n                  hidden: false,\n                  displayActions: false,\n                },\n                field: {\n                  readonly: true\n                }\n              },\n              AllModelRelations: {\n                type: 'object',\n                column: {\n                  type: 'object',\n                  label: 'Context',\n                  format: '{{ currentItem && currentItem.modelData? currentItem.model + \": \" + (currentItem.modelData.name || currentItem.modelData.title || currentItem.modelData.username || currentItem.modelId ): currentItem }}',\n                },\n                field: {\n                  readonly: true,\n                  displayOptions: {\n                    format: '{{ currentItem && currentItem.modelData? currentItem.model + \": \" + (currentItem.modelData.name || currentItem.modelData.title || currentItem.modelData.username || currentItem.modelId ): currentItem }}',\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n    ],\n")])])]),t("p",[e._v("if you are using Axel framework to serve your model from the api, you can also use the extend style of writing nested models;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    nestedModels: [\n      {\n        extends: 'workshop',\n        config: { url: '/api/workshop?filters[moduleId]={{parent.id}}' }\n      },\n      {\n        extends: 'message',\n        config: {\n          url: '{{ parent && parent.id ? \"/api/request/\" + parent.id + \"/message\" : \"\" }}',\n          options: { initialDisplayMode: 'list', },\n          actions: { create: true, },\n        },\n      },\n      {\n        extends: 'modelComment',\n        config: {\n          identity: 'requestComment',\n          name: 'Commentaire interne',\n          namePlural: 'Commentaires internes',\n          title: 'Commentaires internes',\n          options: { initialDisplayMode: 'list', },\n          url: '{{ parent && parent.id ? \"/api/request/\" + parent.id + \"/comment\" : \"\" }}',\n          actions: { create: true, },\n        },\n      },\n    ],\n\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);